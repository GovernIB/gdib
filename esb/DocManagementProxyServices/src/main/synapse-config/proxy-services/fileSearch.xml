<?xml version="1.0" encoding="UTF-8"?>
<proxy name="fileSearch" serviceGroup="CSGD-Repository"
  startOnLoad="true" trace="enable" transports="http https" xmlns="http://ws.apache.org/ns/synapse">
  <target faultSequence="conf:/repository/esb/registry/sequences/ExceptionSequence">
    <inSequence>
      <property name="FORCE_ERROR_ON_SOAP_FAULT" scope="default"
        type="STRING" value="true"/>
      <property name="FORCE_SC_ACCEPTED" scope="axis2" type="STRING" value="false"/>
      <property name="csgdOperation" scope="default" type="STRING" value="searchFiles"/>
      <property name="typeRestrictions" scope="default" type="STRING" value="eni:expediente,rma:recordFolder"/>
      <log level="full"/>
      <property
        expression="json-eval($.searchFilesRequest.serviceHeader)"
        name="serviceHeader" scope="default" type="STRING"/>
      <script function="parseServiceHeader"
        key="conf:/repository/esb/registry/js/serviceHeaderUtils.js" language="js"/>
      <log>
        <property expression="get-property('errorMessage')" name="### Cabecera correcta ¿? ###"/>
      </log>
      <log>
        <property expression="get-property('username')" name="### Usuario cabecera Property ###"/>
      </log>
      <filter regex="true" source="boolean(get-property('serviceHeaderOk'))">
        <then>
          <class name="es.caib.archivodigital.esb.services.mediators.wss.UsernameTokenRestMediator">
            <property name="password" value="password"/>
            <property name="username" value="username"/>
          </class>
          <property expression="get-property('serviceHeaderString')"
            name="serviceHeaderOm" scope="default" type="OM"/>
        </then>
        <else>
          <property name="HTTP_SC" scope="axis2" type="STRING" value="400"/>
          <payloadFactory media-type="json">
            <format>
          		{
          			"exception":{
          				"code": "COD_099",
          				"description": "$1"
          			}
          		}                 
          	</format>
            <args>
              <arg evaluator="xml" expression="get-property('errorMessage')"/>
            </args>
          </payloadFactory>
          <respond description="Enviar excepcion"/>
        </else>
      </filter>
      <property expression="json-eval($.searchFilesRequest.param.query)"
        name="luceneQuery" scope="default" type="STRING"/>
      <log level="custom">
        <property expression="get-property('luceneQuery')" name="#### Lucene Query ####"/>
      </log>
      <script function="checkFileLuceneQuery"
        key="conf:/repository/esb/registry/js/luceneQueryUtils.js" language="js"/>
      <filter regex="true" source="get-property('luceneQueryOk')">
        <then>
          <property
            expression="json-eval($.searchFilesRequest.param.pageNumber)"
            name="pageNumber" scope="default" type="STRING"/>
          <filter regex="true" source="not(boolean(get-property('pageNumber')))">
            <then>
              <property name="pageNumber" scope="default" type="STRING" value=""/>
            </then>
            <else/>
          </filter>
          <call-template target="conf:/repository/esb/registry/sequences/SearchNodeSequence">
            <with-param name="luceneQuery" value="{get-property('luceneQuery')}"/>
            <with-param name="pageNumber" value="{get-property('pageNumber')}"/>
            <with-param name="serviceHeaderString" value="{get-property('serviceHeaderString')}"/>
            <with-param name="nodeType" value="eni:expediente"/>
          </call-template>
        </then>
        <else>
          <property name="exceptionHttpStatusCode" scope="default"
            type="STRING" value="400"/>
          <property name="exceptionCode" scope="default" type="STRING" value="COD_099"/>
          <property name="exceptionDesc" scope="default" type="STRING" value="La consulta Lucene no ha sido informada o no está bien formada. Servicio exclusivo para entidades de tipo eni:expediente."/>
        </else>
      </filter>
      <filter regex="false" source="boolean(get-property('exceptionCode'))">
        <then>
          <property name="HTTP_SC" scope="axis2" type="STRING" value="200"/>
        </then>
        <else>
          <property expression="get-property('exceptionHttpStatusCode')"
            name="HTTP_SC" scope="axis2" type="STRING"/>
          <payloadFactory media-type="json">
            <format>
           		{
           			"exception":{
           				"code": "$1",
           				"description": "$2"
           			}
           		}                 
           	   </format>
            <args>
              <arg evaluator="xml" expression="get-property('exceptionCode')"/>
              <arg evaluator="xml" expression="get-property('exceptionDesc')"/>
            </args>
          </payloadFactory>
        </else>
      </filter>
      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond description="Enviar respuesta"/>
    </inSequence>
    <outSequence/>
  </target>
  <parameter name="disableSOAP12">true</parameter>
  <parameter name="disableSOAP11">true</parameter>
</proxy>
