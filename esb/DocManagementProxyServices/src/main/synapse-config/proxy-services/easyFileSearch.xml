<?xml version="1.0" encoding="UTF-8"?>
<proxy name="easyFileSearch" startOnLoad="true" trace="enable"
  transports="http https" xmlns="http://ws.apache.org/ns/synapse">
  <target faultSequence="conf:/repository/esb/registry/sequences/ExceptionSequence">
    <inSequence>
      <property name="FORCE_ERROR_ON_SOAP_FAULT" scope="default"
        type="STRING" value="true"/>
      <property name="FORCE_SC_ACCEPTED" scope="axis2" type="STRING" value="false"/>
      <property name="csgdOperation" scope="default" type="STRING" value="searchFiles"/>
      <property name="typeRestrictions" scope="default" type="STRING" value="eni:expediente,rma:recordFolder"/>
      <log level="full"/>
      <property
        expression="json-eval($.searchFilesRequest.serviceHeader)"
        name="serviceHeader" scope="default" type="STRING"/>
      <script function="parseServiceHeader"
        key="conf:/repository/esb/registry/js/serviceHeaderUtils.js" language="js"/>
      <log>
        <property expression="get-property('errorMessage')" name="### Cabecera correcta ¿? ###"/>
      </log>
      <log>
        <property expression="get-property('username')" name="### Usuario cabecera Property ###"/>
      </log>
      <filter xpath="not(get-property('serviceHeaderOk'))">
        <then>
          <property name="HTTP_SC" scope="axis2" type="STRING" value="400"/>
          <payloadFactory media-type="json">
            <format>
		            		{
		            			"exception":{
		            				"code": "COD_099",
		            				"description": "$1"
		            			}
		            		}                 
		            	</format>
            <args>
              <arg evaluator="xml" expression="get-property('errorMessage')"/>
            </args>
          </payloadFactory>
          <respond description="Enviar excepcion"/>
        </then>
        <else/>
      </filter>
      <!-- Se forma consulta Lucene -->
      <script function="buildFileLuceneQuery"
        key="conf:/repository/esb/registry/js/luceneQueryUtils.js" language="js"/>
      <log level="custom">
        <property expression="get-property('luceneQuery')" name="#### Lucene Query ####"/>
      </log>
      <filter regex="true" source="boolean(get-property('reqServiceOk'))">
        <then>
          <property
            expression="json-eval($.searchFilesRequest.param.pageNumber)"
            name="pageNumber" scope="default" type="STRING"/>
          <filter regex="true" source="not(boolean(get-property('pageNumber')))">
            <then>
              <property name="pageNumber" scope="default" type="STRING" value=""/>
            </then>
            <else/>
          </filter>
          <payloadFactory media-type="json">
            <format>
           		{
				  "searchFilesRequest": {
				    "serviceHeader": {
				      "serviceVersion": "1.0",
				      "auditInfo": {
				        "applicant": {
				          "document": "$1",
				          "name": "$2"
				        },
				        "publicServant": {
				        	"identificationData": {
					          "document": "$3",
					          "name": "$4"
					        },
					        "organization": "$5"
				        },
				        "file": {
				          "id": "$6",
				          "proceedings": {
				          	"id": "$7", 
				          	"name": "$8" 
				          }
				        },
				        "application": "$9",
				        "esbOperation": "$10"
				      },
				      "securityInfo": {
				        "user": "$11",
				        "$12": "$13"
				      },
				      "restrictions": {
				      	"types": "$14"
				      }
				    },
				    "param": {
				      "query": "$15",
				      "pageNumber": "$16"
				    }
				  }
				}                 
           	   </format>
            <args>
              <arg evaluator="xml" expression="get-property('serviceHeaderApplicantDoc')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderApplicantName')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderPublicServantDoc')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderPublicServantName')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderOrgAuthor')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderFileId')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderFileProcId')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderFileProcName')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderAppName')"/>
              <arg evaluator="xml" expression="get-property('csgdOperation')"/>
              <arg evaluator="xml" expression="get-property('username')"/>
              <arg evaluator="xml" expression="get-property('secToken')"/>
              <arg evaluator="xml" expression="get-property('password')"/>
              <arg evaluator="xml" expression="get-property('typeRestrictions')"/>
              <arg evaluator="xml" expression="get-property('luceneQuery')"/>
              <arg evaluator="xml" expression="get-property('pageNumber')"/>
            </args>
          </payloadFactory>
          <call>
            <endpoint>
              <http method="post" trace="disable" uri-template="https://afirmades.caib.es:4430/esb/services/fileSearch">
                <timeout>
                  <duration>20000</duration>
                  <responseAction>fault</responseAction>
                </timeout>
                <suspendOnFailure>
                  <errorCodes>-1</errorCodes>
                  <initialDuration>0</initialDuration>
                  <progressionFactor>1.0</progressionFactor>
                  <maximumDuration>0</maximumDuration>
                </suspendOnFailure>
                <markForSuspension>
                  <errorCodes>-1</errorCodes>
                </markForSuspension>
              </http>
            </endpoint>
          </call>
          <filter regex="200" source="get-property('axis2', 'HTTP_SC')">
            <then>
              <!-- Resultado correcto -->
              <log level="full"/>
            </then>
            <else>
              <property expression="get-property('axis2', 'HTTP_SC')"
                name="exceptionHttpStatusCode" scope="default" type="STRING"/>
              <property expression="json-eval($.exception.code)"
                name="exceptionCode" scope="default" type="STRING"/>
              <property expression="json-eval($.exception.description)"
                name="exceptionDesc" scope="default" type="STRING"/>
            </else>
          </filter>
        </then>
        <else>
          <property name="exceptionHttpStatusCode" scope="default"
            type="STRING" value="400"/>
          <property name="exceptionCode" scope="default" type="STRING" value="COD_099"/>
          <property expression="get-property('reqServiceErrorMessage')"
            name="exceptionDesc" scope="default" type="STRING"/>
        </else>
      </filter>
      <filter regex="false" source="boolean(get-property('exceptionCode'))">
        <then>
          <property name="HTTP_SC" scope="axis2" type="STRING" value="200"/>
        </then>
        <else>
          <property expression="get-property('exceptionHttpStatusCode')"
            name="HTTP_SC" scope="axis2" type="STRING"/>
          <payloadFactory media-type="json">
            <format>
           		{
           			"exception":{
           				"code": "$1",
           				"description": "$2"
           			}
           		}                 
           	   </format>
            <args>
              <arg evaluator="xml" expression="get-property('exceptionCode')"/>
              <arg evaluator="xml" expression="get-property('exceptionDesc')"/>
            </args>
          </payloadFactory>
        </else>
      </filter>
      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond description="Enviar respuesta"/>
    </inSequence>
    <outSequence/>
  </target>
  <parameter name="disableSOAP12">true</parameter>
  <parameter name="disableSOAP11">true</parameter>
</proxy>
