<?xml version="1.0" encoding="UTF-8"?>
<proxy name="dispatchDocument" startOnLoad="true" statistics="enable"
  trace="enable" transports="http https" xmlns="http://ws.apache.org/ns/synapse">
  <target faultSequence="conf:/repository/esb/registry/sequences/ExceptionSequence">
    <inSequence>
      <property name="FORCE_ERROR_ON_SOAP_FAULT" scope="default"
        type="STRING" value="true"/>
      <property name="FORCE_SC_ACCEPTED" scope="axis2" type="STRING" value="false"/>
      <property name="csgdOperation" scope="default" type="STRING" value="dispatchDocument"/>
      <property name="typeRestrictions" scope="default" type="STRING" value="eni:documento"/>
      <log level="full"/>
      <property
        expression="json-eval($.dispatchDocumentRequest.serviceHeader)"
        name="serviceHeader" scope="default" type="STRING"/>
      <script function="parseServiceHeader"
        key="conf:/repository/esb/registry/js/serviceHeaderUtils.js" language="js"/>
      <log>
        <property expression="get-property('errorMessage')" name="### Cabecera correcta ¿? ###"/>
      </log>
      <log>
        <property expression="get-property('username')" name="### Usuario cabecera Property ###"/>
      </log>
      <filter regex="true" source="not(boolean(get-property('serviceHeaderOk')))">
        <then>
          <property name="HTTP_SC" scope="axis2" type="STRING" value="400"/>
          <payloadFactory media-type="json">
            <format>
		            		{
		            			"exception":{
		            				"code": "COD_099",
		            				"description": "$1"
		            			}
		            		}                 
						</format>
            <args>
              <arg evaluator="xml" expression="get-property('errorMessage')"/>
            </args>
          </payloadFactory>
          <respond description="Enviar excepcion"/>
        </then>
        <else/>
      </filter>
      <property
        expression="json-eval($.dispatchDocumentRequest.param.sourceNodeId)"
        name="sourceNodeIdParam" scope="default" type="STRING"/>
      <property
        expression="json-eval($.dispatchDocumentRequest.param.targetNode.targetType)"
        name="targetTypeParam" scope="default" type="STRING"/>
      <property
        expression="json-eval($.dispatchDocumentRequest.param.targetNode.id)"
        name="targetNodeIdParam" scope="default" type="STRING"/>
      <property
        expression="json-eval($.dispatchDocumentRequest.param.targetNode.docClassification.serie)"
        name="newDocSeriesParam" scope="default" type="STRING"/>
      <property
        expression="json-eval($.dispatchDocumentRequest.param.targetNode.docClassification.type)"
        name="newDocSubSeriesParam" scope="default" type="STRING"/>
      <log>
        <property
          expression="boolean(get-property('sourceNodeIdParam'))" name="### sourceNodeIdParamOk ###"/>
      </log>
      <log>
        <property expression="boolean(get-property('targetTypeParam'))" name="### targetTypeParamOk ###"/>
      </log>
      <log>
        <property
          expression="boolean(get-property('targetNodeIdParam'))" name="### targetNodeIdParamOk ###"/>
      </log>
      <log>
        <property
          expression="boolean(get-property('newDocSeriesParam'))" name="### newDocSeriesParamOk ###"/>
      </log>
      <log>
        <property
          expression="boolean(boolean(get-property('sourceNodeIdParam')) and boolean(get-property('targetTypeParam')) and boolean(get-property('targetNodeIdParam')) and boolean(get-property('newDocSeriesParam')))" name="### Peticion correcta ###"/>
      </log>
      <filter regex="true" source="boolean(boolean(get-property('sourceNodeIdParam')) and boolean(get-property('targetTypeParam')) and boolean(get-property('targetNodeIdParam')) and boolean(get-property('newDocSeriesParam')))">
        <then>
          <!-- En primer lugar obtenemos el documento a trasladar -->
          <payloadFactory media-type="json">
            <format>
							{
							  "getDocumentRequest": {
								"serviceHeader": {
								  "serviceVersion": "1.0",
								  "auditInfo": {
									"applicant": {
									  "document": "$1",
									  "name": "$2"
									},
									"publicServant": {
										"identificationData": {
										  "document": "$3",
										  "name": "$4"
										},
										"organization": "$5"
									},
									"file": {
									  "id": "$6",
									  "proceedings": {
										"id": "$7", 
										"name": "$8" 
									  }
									},
									"application": "$9",
									"esbOperation": "$10"
								  },
								  "securityInfo": {
									"user": "$11",
									"$12": "$13"
								  },
								  "restrictions": {
									"types": "$14"
								  }
								},
								"param": {
								  "documentId": { 
									"nodeId": "$15"
								  },
								  "content": "true"
								}
							  }
							}                 
						</format>
            <args>
              <arg evaluator="xml" expression="get-property('serviceHeaderApplicantDoc')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderApplicantName')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderPublicServantDoc')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderPublicServantName')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderOrgAuthor')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderFileId')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderFileProcId')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderFileProcName')"/>
              <arg evaluator="xml" expression="get-property('serviceHeaderAppName')"/>
              <arg evaluator="xml" expression="get-property('csgdOperation')"/>
              <arg evaluator="xml" expression="get-property('username')"/>
              <arg evaluator="xml" expression="get-property('secToken')"/>
              <arg evaluator="xml" expression="get-property('password')"/>
              <arg evaluator="xml" expression="get-property('typeRestrictions')"/>
              <arg evaluator="xml" expression="get-property('sourceNodeIdParam')"/>
            </args>
          </payloadFactory>
          <call>
            <endpoint>
              <http method="post" trace="disable" uri-template="https://afirmades.caib.es:4430/esb/services/getDocument">
                <timeout>
                  <duration>20000</duration>
                  <responseAction>fault</responseAction>
                </timeout>
                <suspendOnFailure>
                  <errorCodes>-1</errorCodes>
                  <initialDuration>0</initialDuration>
                  <progressionFactor>1.0</progressionFactor>
                  <maximumDuration>0</maximumDuration>
                </suspendOnFailure>
                <markForSuspension>
                  <errorCodes>-1</errorCodes>
                </markForSuspension>
              </http>
            </endpoint>
          </call>
          <filter regex="200" source="get-property('axis2', 'HTTP_SC')">
            <then>
              <!-- Se crea el documento trasladado en el nodo destino, estableciendo sus metadatos -->
              <property
                expression="json-eval($.getDocumentResult.resParam)"
                name="dispatchedDoc" scope="default" type="STRING"/>
              <script function="buildCreateTargetDocRequest"
                key="conf:/repository/esb/registry/js/createAndSetNodeUtils.js" language="js"/>
              <filter regex="true" source="get-property('createDocReqOk')">
                <then>
                  <payloadFactory media-type="json">
                    <format>
											{
											  "createDocumentRequest": {
												"serviceHeader": {
												  "serviceVersion": "1.0",
												  "auditInfo": {
													"applicant": {
													  "document": "$1",
													  "name": "$2"
													},
													"publicServant": {
														"identificationData": {
														  "document": "$3",
														  "name": "$4"
														},
														"organization": "$5"
													},
													"file": {
													  "id": "$6",
													  "proceedings": {
														"id": "$7", 
														"name": "$8" 
													  }
													},
													"application": "$9",
													"esbOperation": "$10"
												  },
												  "securityInfo": {
													"user": "$11",
													"$12": "$13"
												  },
												  "restrictions": {
													"types": "$14"
												  }
												},
												"param": {
												  "parent": "$15",
												  "document": $16,
												  "retrieveNode": "false"
												}
											  }
											}                 
										</format>
                    <args>
                      <arg evaluator="xml" expression="get-property('serviceHeaderApplicantDoc')"/>
                      <arg evaluator="xml" expression="get-property('serviceHeaderApplicantName')"/>
                      <arg evaluator="xml" expression="get-property('serviceHeaderPublicServantDoc')"/>
                      <arg evaluator="xml" expression="get-property('serviceHeaderPublicServantName')"/>
                      <arg evaluator="xml" expression="get-property('serviceHeaderOrgAuthor')"/>
                      <arg evaluator="xml" expression="get-property('serviceHeaderFileId')"/>
                      <arg evaluator="xml" expression="get-property('serviceHeaderFileProcId')"/>
                      <arg evaluator="xml" expression="get-property('serviceHeaderFileProcName')"/>
                      <arg evaluator="xml" expression="get-property('serviceHeaderAppName')"/>
                      <arg evaluator="xml" expression="get-property('csgdOperation')"/>
                      <arg evaluator="xml" expression="get-property('username')"/>
                      <arg evaluator="xml" expression="get-property('secToken')"/>
                      <arg evaluator="xml" expression="get-property('password')"/>
                      <arg evaluator="xml" expression="get-property('typeRestrictions')"/>
                      <arg evaluator="xml" expression="get-property('targetNodeIdParam')"/>
                      <arg evaluator="xml" expression="get-property('createTargetDocRequest')"/>
                    </args>
                  </payloadFactory>
                  <call>
                    <endpoint>
                      <http method="post" trace="disable" uri-template="https://afirmades.caib.es:4430/esb/services/createDocument">
                        <timeout>
                          <duration>20000</duration>
                          <responseAction>fault</responseAction>
                        </timeout>
                        <suspendOnFailure>
                          <errorCodes>-1</errorCodes>
                          <initialDuration>0</initialDuration>
                          <progressionFactor>1.0</progressionFactor>
                          <maximumDuration>0</maximumDuration>
                        </suspendOnFailure>
                        <markForSuspension>
                          <errorCodes>-1</errorCodes>
                        </markForSuspension>
                      </http>
                    </endpoint>
                  </call>
                  <filter regex="200" source="get-property('axis2', 'HTTP_SC')">
                    <then>
                      <!-- Por último se modifica el documento trasladado, estableciendo el aspecto gdib:trasladado y sus metadatos -->
                      <property
                        expression="json-eval($.createDocumentResult.resParam.id)"
                        name="newDocIdParam" scope="default" type="STRING"/>
                      <script function="buildSetDispatchedDocRequest"
                        key="conf:/repository/esb/registry/js/createAndSetNodeUtils.js" language="js"/>
                      <log>
                        <property
                          expression="get-property('sourceNodeIdParam')" name="### sourceDocumentToSet ###"/>
                      </log>
                      <payloadFactory media-type="json">
                        <format>
													{
													  "setDocumentRequest": {
														"serviceHeader": {
														  "serviceVersion": "1.0",
														  "auditInfo": {
															"applicant": {
															  "document": "$1",
															  "name": "$2"
															},
															"publicServant": {
																"identificationData": {
																  "document": "$3",
																  "name": "$4"
																},
																"organization": "$5"
															},
															"file": {
															  "id": "$6",
															  "proceedings": {
																"id": "$7", 
																"name": "$8" 
															  }
															},
															"application": "$9",
															"esbOperation": "$10"
														  },
														  "securityInfo": {
															"user": "$11",
															"$12": "$13"
														  },
														  "restrictions": {
															"types": "$14"
														  }
														},
														"param": {
															"document": $15
														}
													  }
													}                 
												</format>
                        <args>
                          <arg evaluator="xml" expression="get-property('serviceHeaderApplicantDoc')"/>
                          <arg evaluator="xml" expression="get-property('serviceHeaderApplicantName')"/>
                          <arg evaluator="xml" expression="get-property('serviceHeaderPublicServantDoc')"/>
                          <arg evaluator="xml" expression="get-property('serviceHeaderPublicServantName')"/>
                          <arg evaluator="xml" expression="get-property('serviceHeaderOrgAuthor')"/>
                          <arg evaluator="xml" expression="get-property('serviceHeaderFileId')"/>
                          <arg evaluator="xml" expression="get-property('serviceHeaderFileProcId')"/>
                          <arg evaluator="xml" expression="get-property('serviceHeaderFileProcName')"/>
                          <arg evaluator="xml" expression="get-property('serviceHeaderAppName')"/>
                          <arg evaluator="xml" expression="get-property('csgdOperation')"/>
                          <arg evaluator="xml" expression="get-property('username')"/>
                          <arg evaluator="xml" expression="get-property('secToken')"/>
                          <arg evaluator="xml" expression="get-property('password')"/>
                          <arg evaluator="xml" expression="get-property('typeRestrictions')"/>
                          <arg evaluator="xml" expression="get-property('sourceDocumentToSet')"/>
                        </args>
                      </payloadFactory>
                      <call>
                        <endpoint>
                          <http method="post" trace="disable" uri-template="https://afirmades.caib.es:4430/esb/services/setDocument">
                            <timeout>
                              <duration>20000</duration>
                              <responseAction>fault</responseAction>
                            </timeout>
                            <suspendOnFailure>
                              <errorCodes>-1</errorCodes>
                              <initialDuration>0</initialDuration>
                              <progressionFactor>1.0</progressionFactor>
                              <maximumDuration>0</maximumDuration>
                            </suspendOnFailure>
                            <markForSuspension>
                              <errorCodes>-1</errorCodes>
                            </markForSuspension>
                          </http>
                        </endpoint>
                      </call>
                      <filter regex="200" source="get-property('axis2', 'HTTP_SC')">
                        <then>
                          <payloadFactory media-type="json">
                            <format>
						           		{
						           			"dispatchDocumentResult": {
						           				"result": {
						           					"code": "COD_000",
						           					"description": "Petición realizada correctamente."
						           				},
						           				"resParam": "$1"
						           			}
						           		}                 
														</format>
                            <args>
                              <arg evaluator="xml" expression="get-property('newDocIdParam')"/>
                            </args>
                          </payloadFactory>
                        </then>
                        <else>
                          <property
                            expression="get-property('axis2', 'HTTP_SC')"
                            name="exceptionHttpStatusCode"
                            scope="default" type="STRING"/>
                          <property
                            expression="json-eval($.exception.code)"
                            name="exceptionCode" scope="default" type="STRING"/>
                          <property
                            expression="json-eval($.exception.description)"
                            name="exceptionDesc" scope="default" type="STRING"/>
                        </else>
                      </filter>
                    </then>
                    <else>
                      <!-- No se ha podido crear el documento trasladado en el SGD -->
                      <property
                        expression="get-property('axis2', 'HTTP_SC')"
                        name="exceptionHttpStatusCode" scope="default" type="STRING"/>
                      <property expression="json-eval($.exception.code)"
                        name="exceptionCode" scope="default" type="STRING"/>
                      <property
                        expression="json-eval($.exception.description)"
                        name="exceptionDesc" scope="default" type="STRING"/>
                    </else>
                  </filter>
                </then>
                <else>
                  <!-- No se ha podido formar la petición para crear el nuevo documento trasladado -->
                  <property name="exceptionHttpStatusCode"
                    scope="default" type="STRING" value="400"/>
                  <property name="exceptionCode" scope="default"
                    type="STRING" value="COD_020"/>
                  <property expression="get-property('errorMessage')"
                    name="exceptionDesc" scope="default" type="STRING"/>
                </else>
              </filter>
            </then>
            <else>
              <!-- No se ha encontrado el documento a trasladar en el SGD -->
              <property expression="get-property('axis2', 'HTTP_SC')"
                name="exceptionHttpStatusCode" scope="default" type="STRING"/>
              <property expression="json-eval($.exception.code)"
                name="exceptionCode" scope="default" type="STRING"/>
              <property expression="json-eval($.exception.description)"
                name="exceptionDesc" scope="default" type="STRING"/>
            </else>
          </filter>
        </then>
        <else>
          <!-- El parametro de la petición no esta bien formado-->
          <property name="exceptionHttpStatusCode" scope="default"
            type="STRING" value="400"/>
          <property name="exceptionCode" scope="default" type="STRING" value="COD_099"/>
          <property name="exceptionDesc" scope="default" type="STRING" value="No ha sido informado en la petición del servicio el identificador del documento a trasladar, su destino o la procedencia del documento."/>
        </else>
      </filter>
      <!-- Se procesa la información de la respuesta, verificando si se debe retornar una excepción -->
      <filter regex="false" source="boolean(get-property('exceptionCode'))">
        <then>
          <property name="HTTP_SC" scope="axis2" type="STRING" value="200"/>
        </then>
        <else>
          <property expression="get-property('exceptionHttpStatusCode')"
            name="HTTP_SC" scope="axis2" type="STRING"/>
          <payloadFactory media-type="json">
            <format>
							{
								"exception":{
									"code": "$1",
									"description": "$2"
								}
							}                 
						</format>
            <args>
              <arg evaluator="xml" expression="get-property('exceptionCode')"/>
              <arg evaluator="xml" expression="get-property('exceptionDesc')"/>
            </args>
          </payloadFactory>
        </else>
      </filter>
      <log>
        <property name="### Enviar respuesta ###" value="Antes de enviar respuesta"/>
      </log>
      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond description="Enviar respuesta"/>
    </inSequence>
    <outSequence/>
  </target>
  <parameter name="disableSOAP12">true</parameter>
  <parameter name="disableSOAP11">true</parameter>
</proxy>
