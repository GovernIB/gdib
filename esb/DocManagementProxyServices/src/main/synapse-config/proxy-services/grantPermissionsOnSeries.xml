<?xml version="1.0" encoding="UTF-8"?>
<proxy xmlns="http://ws.apache.org/ns/synapse"
       name="grantPermissionsOnSeries"
       transports="http,https"
       statistics="disable"
       trace="enable"
       startOnLoad="true">
   <target faultSequence="conf:/repository/esb/registry/sequences/ExceptionSequence">
      <inSequence>
         <property name="FORCE_ERROR_ON_SOAP_FAULT"
                   value="true"
                   scope="default"
                   type="STRING"/>
         <property name="FORCE_SC_ACCEPTED"
                   value="false"
                   scope="axis2"
                   type="STRING"/>
         <property name="csgdOperation"
                   value="grantPermissionsOnSeries"
                   scope="default"
                   type="STRING"/>
         <property name="typeRestrictions"
                   value="eemgde:serie"
                   scope="default"
                   type="STRING"/>
         <log level="full"/>
         <property name="serviceHeader"
                   expression="json-eval($.grantPermissionsOnSeriesRequest.serviceHeader)"
                   scope="default"
                   type="STRING"/>
         <script language="js"
                 key="conf:/repository/esb/registry/js/serviceHeaderUtils.js"
                 function="parseServiceHeader"/>
         <log>
            <property name="### Cabecera correcta ¿? ###"
                      expression="get-property('errorMessage')"/>
         </log>
         <log>
            <property name="### Usuario cabecera Property ###"
                      expression="get-property('username')"/>
         </log>
         <filter source="not(boolean(get-property('serviceHeaderOk')))" regex="true">
            <then>
               <property name="HTTP_SC" value="400" scope="axis2" type="STRING"/>
               <payloadFactory media-type="json">
                  <format>
		            		{
		            			"exception":{
		            				"code": "COD_099",
		            				"description": "$1"
		            			}
		            		}                 
		            	</format>
                  <args>
                     <arg evaluator="xml" expression="get-property('errorMessage')"/>
                  </args>
               </payloadFactory>
               <respond description="Enviar excepcion"/>
            </then>
            <else/>
         </filter>
         <script language="js"
                 key="conf:/repository/esb/registry/js/permissionsNodeUtils.js"
                 function="buildAuthorizeSeriesRequest"/>
         <log>
            <property name="### Peticion correcta ###"
                      expression="get-property('reqServiceOk')"/>
         </log>
         <filter source="boolean(get-property('reqServiceOk'))" regex="true">
            <then>
               <call-template target="conf:/repository/esb/registry/sequences/ReusableServiceReqSequence">
                  <with-param name="reqService" value="{get-property('reqService')}"/>
                  <with-param name="serviceHeaderString"
                              value="{get-property('serviceHeaderString')}"/>
                  <with-param name="gdibOperation" value="authorizeNode"/>
               </call-template>
               <!-- El metodo no devuelve respuesta en caso de finalizar correctamente la petición --><payloadFactory media-type="json">
                  <format>
           		{
           			"grantPermissionsOnSeriesResult": {
           				"result": {
           					"code": "COD_000",
           					"description": "Petición realizada correctamente."
           				}
           			}
           		}                 
           	   </format>
                  <args/>
               </payloadFactory>
            </then>
            <else>
               <property name="exceptionHttpStatusCode"
                         value="400"
                         scope="default"
                         type="STRING"/>
               <property name="exceptionCode"
                         value="COD_099"
                         scope="default"
                         type="STRING"/>
               <property name="exceptionDesc"
                         expression="get-property('reqServiceErrorMessage')"
                         scope="default"
                         type="STRING"/>
            </else>
         </filter>
         <filter source="boolean(get-property('exceptionCode'))" regex="false">
            <then>
               <property name="HTTP_SC" value="200" scope="axis2" type="STRING"/>
            </then>
            <else>
               <property name="HTTP_SC"
                         expression="get-property('exceptionHttpStatusCode')"
                         scope="axis2"
                         type="STRING"/>
               <payloadFactory media-type="json">
                  <format>
           		{
           			"exception":{
           				"code": "$1",
           				"description": "$2"
           			}
           		}                 
           	   </format>
                  <args>
                     <arg evaluator="xml" expression="get-property('exceptionCode')"/>
                     <arg evaluator="xml" expression="get-property('exceptionDesc')"/>
                  </args>
               </payloadFactory>
            </else>
         </filter>
         <log>
            <property name="### Enviar respuesta ###" value="Antes de enviar respuesta"/>
         </log>
         <property name="messageType"
                   value="application/json"
                   scope="axis2"
                   type="STRING"/>
         <respond description="Enviar respuesta"/>
      </inSequence>
      <outSequence/>
   </target>
   <parameter name="disableSOAP12">true</parameter>
   <parameter name="disableSOAP11">true</parameter>
   <description/>
</proxy>
                                