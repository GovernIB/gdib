<?xml version="1.0" encoding="UTF-8"?>
<proxy name="getDocument" startOnLoad="true" trace="enable"
  transports="http" xmlns="http://ws.apache.org/ns/synapse">
  <target faultSequence="conf:/repository/esb/registry/sequences/ExceptionSequence">
    <inSequence>
      <property name="FORCE_ERROR_ON_SOAP_FAULT" scope="default"
        type="STRING" value="true"/>
      <property name="FORCE_SC_ACCEPTED" scope="axis2" type="STRING" value="false"/>
      <property name="csgdOperation" scope="default" type="STRING" value="getDocument"/>
      <property name="typeRestrictions" scope="default" type="STRING" value="eni:documento,gdib:documentoMigrado"/>
      <log level="full"/>
      <property
        expression="json-eval($.getDocumentRequest.serviceHeader)"
        name="serviceHeader" scope="default" type="STRING"/>
      <script function="parseServiceHeader"
        key="conf:/repository/esb/registry/js/serviceHeaderUtils.js" language="js"/>
      <log>
        <property expression="get-property('serviceHeaderOk')" name="### Cabecera correcta ¿? ###"/>
      </log>
      <log>
        <property expression="get-property('username')" name="### Usuario cabecera Property ###"/>
      </log>
      <filter regex="true" source="boolean(get-property('serviceHeaderOk'))">
        <then>
          <class name="es.caib.archivodigital.esb.services.mediators.wss.UsernameTokenRestMediator">
            <property name="password" value="password"/>
            <property name="username" value="username"/>
          </class>
          <property expression="get-property('serviceHeaderString')"
            name="serviceHeaderOm" scope="default" type="OM"/>
        </then>
        <else>
          <property name="HTTP_SC" scope="axis2" type="STRING" value="400"/>
          <payloadFactory media-type="json">
            <format>
		            		{
		            			"exception":{
		            				"code": "COD_099",
		            				"description": "$1"
		            			}
		            		}                 
		            	</format>
            <args>
              <arg evaluator="xml" expression="get-property('errorMessage')"/>
            </args>
          </payloadFactory>
          <respond description="Enviar excepcion"/>
        </else>
      </filter>
      <log>
        <property expression="get-property('csgdOperation')" name="### Operación ESB ###"/>
      </log>
      <property
        expression="json-eval($.getDocumentRequest.param.documentId)"
        name="documentId" scope="default" type="STRING"/>
      <script function="getTypeDocId"
        key="conf:/repository/esb/registry/js/getDocumentUtils.js" language="js"/>
      <filter regex="true" source="boolean(get-property('documentIdOk'))">
        <then>
          <property
            expression="json-eval($.getDocumentRequest.param.content)"
            name="getContent" scope="default" type="BOOLEAN"/>
          <filter regex="true" source="get-property('getContent')">
            <then>
              <log level="custom">
                <property name="### Recuperar contenido ###" value="Se recupera contenido del documento."/>
              </log>
            </then>
            <else>
              <property name="getContent" scope="default" type="BOOLEAN" value="false"/>
              <log level="custom">
                <property name="Recuperar contenido" value="No se recupera contenido del documento."/>
              </log>
            </else>
          </filter>
          <switch source="get-property('typeId')">
            <case regex="node">
              <log>
                <property expression="get-property('nodeId')" name="### Identificador de documento a recuperar ###"/>
              </log>
              <call-template target="conf:/repository/esb/registry/sequences/GetNodeSequence">
                <with-param name="nodeId" value="{get-property('nodeId')}"/>
                <with-param name="getContent" value="{get-property('getContent')}"/>
                <with-param name="serviceHeaderString" value="{get-property('serviceHeaderString')}"/>
                <with-param name="nodeType" value="eni:documento"/>
              </call-template>
              <filter
                xmlns:csgd="urn:es.caib.archivodigital.esb.services:1.0.0" xpath="$body/csgd:getDocumentResult/csgd:result/csgd:code[text() != 'COD_000']">
                <then>
                  <property name="exceptionHttpStatusCode"
                    scope="default" type="STRING" value="404"/>
                  <property name="exceptionCode" scope="default"
                    type="STRING" value="COD_001"/>
                  <property
                    expression="fn:concat('No se ha encontrado el documento con id  ',get-property('nodeId'),'.')"
                    name="exceptionDesc" scope="default" type="STRING"/>
                </then>
                <else/>
              </filter>
            </case>
            <case regex="csv">
              <log level="custom">
                <property name="Prueba" value="CSV del documento informado, es necesario buscarlo mediante searchNode."/>
              </log>
              <script function="buildDocByCSVLuceneQuery"
                key="conf:/repository/esb/registry/js/luceneQueryUtils.js" language="js"/>
              <log level="custom">
                <property expression="get-property('luceneQuery')" name="#### Lucen Query ####"/>
              </log>
              <property name="pageNumber" scope="default" type="STRING" value=""/>
              <call-template target="conf:/repository/esb/registry/sequences/SearchNodeSequence">
                <with-param name="luceneQuery" value="{get-property('luceneQuery')}"/>
                <with-param name="pageNumber" value="{get-property('pageNumber')}"/>
                <with-param name="serviceHeaderString" value="{get-property('serviceHeaderString')}"/>
                <with-param name="nodeType" value="documento"/>
              </call-template>
              <filter
                xmlns:csgd="urn:es.caib.archivodigital.esb.services:1.0.0" xpath="boolean($body/csgd:searchDocumentsResult/csgd:result/csgd:code[text() = 'COD_000'])">
                <then>
                  <!-- Verificamos que solo se ha obtenido un documento -->
                  <xslt key="conf:/repository/esb/registry/xslt/getNumDocsReturnedByCSVXMLResponse.xslt"/>
                  <log>
                    <property
                      expression="$body/csgd:searchFilterResult/csgd:numDocuments/text()" name="numDocs"/>
                  </log>
                  <filter xpath="$body/csgd:searchFilterResult/csgd:numDocuments/text() = '1'">
                    <then>
                      <property
                        expression="$body/csgd:searchFilterResult/csgd:document/csgd:type/text()"
                        name="docType" scope="default" type="STRING"/>
                      <switch source="get-property('docType')">
                        <case regex="eni:documento">
                          <property
                            expression="$body/csgd:searchFilterResult/csgd:document/csgd:nodeId/text()"
                            name="docId" scope="default" type="STRING"/>
                          <call-template target="conf:/repository/esb/registry/sequences/GetNodeSequence">
                            <with-param name="nodeId" value="{get-property('docId')}"/>
                            <with-param name="getContent" value="{get-property('getContent')}"/>
                            <with-param name="serviceHeaderString" value="{get-property('serviceHeaderString')}"/>
                            <with-param name="nodeType" value="eni:documento"/>
                          </call-template>
                          <filter xpath="$body/csgd:getDocumentResult/csgd:result/csgd:code[text() != 'COD_000']">
                            <then>
                              <property name="exceptionHttpStatusCode"
                                scope="default" type="STRING" value="404"/>
                              <property name="exceptionCode"
                                scope="default" type="STRING" value="COD_001"/>
                              <property
                                expression="fn:concat('No se ha encontrado el documento con csv  ',get-property('nodeId'),'.')"
                                name="exceptionDesc" scope="default" type="STRING"/>
                            </then>
                            <else>
                              <!-- Se filtra la información del documento a retornar -->
                              <xslt key="conf:/repository/esb/registry/xslt/getDocByCSVXMLResponse.xslt">
                                <property
                                  expression="get-property('getContent')" name="retrieveContent"/>
                              </xslt>
                            </else>
                          </filter>
                        </case>
                        <case regex="gdib:documentoMigrado">
                          <property
                            expression="$body/csgd:searchFilterResult/csgd:document/csgd:extId/text()"
                            name="externalId" scope="default" type="STRING"/>
                          <property
                            expression="$body/csgd:searchFilterResult/csgd:document/csgd:appName/text()"
                            name="appId" scope="default" type="STRING"/>
                          <call-template target="conf:/repository/esb/registry/sequences/GetMigrationNodeSequence">
                            <with-param name="appId" value="{get-property('appId')}"/>
                            <with-param name="externalId" value="{get-property('externalId')}"/>
                            <with-param name="getContent" value="{get-property('getContent')}"/>
                            <with-param name="serviceHeaderString" value="{get-property('serviceHeaderString')}"/>
                          </call-template>
                          <filter xpath="$body/csgd:getDocumentResult/csgd:result/csgd:code[text() != 'COD_000']">
                            <then>
                              <property name="exceptionHttpStatusCode"
                                scope="default" type="STRING" value="404"/>
                              <property name="exceptionCode"
                                scope="default" type="STRING" value="COD_001"/>
                              <property
                                expression="fn:concat('No se ha encontrado el documento migrado con id externo ',get-property('externalId'),', y aplicación ',get-property('appId'),'.')"
                                name="exceptionDesc" scope="default" type="STRING"/>
                            </then>
                            <else/>
                          </filter>
                        </case>
                        <default>
                          <property name="exceptionHttpStatusCode"
                            scope="default" type="STRING" value="404"/>
                          <property name="exceptionCode" scope="default"
                            type="STRING" value="COD_001"/>
                          <property
                            expression="fn:concat('El documento con CSV ',get-property('nodeId'),', tiene un tipo de documento no admitido: ',get-property('docType'),'.')"
                            name="exceptionDesc" scope="default" type="STRING"/>
                        </default>
                      </switch>
                    </then>
                    <else>
                      <property name="exceptionHttpStatusCode"
                        scope="default" type="STRING" value="404"/>
                      <property name="exceptionCode" scope="default"
                        type="STRING" value="COD_001"/>
                      <property
                        expression="fn:concat('Se ha encontrado más de documento con csv  ',get-property('nodeId'),', consulte la incidencia al administrador del sistema.')"
                        name="exceptionDesc" scope="default" type="STRING"/>
                    </else>
                  </filter>
                </then>
                <else>
                  <property name="exceptionHttpStatusCode"
                    scope="default" type="STRING" value="404"/>
                  <property name="exceptionCode" scope="default"
                    type="STRING" value="COD_001"/>
                  <property
                    expression="fn:concat('No se ha encontrado el documento con CSV ',get-property('nodeId'),'.')"
                    name="exceptionDesc" scope="default" type="STRING"/>
                </else>
              </filter>
            </case>
            <case regex="migratedNode">
              <call-template target="conf:/repository/esb/registry/sequences/GetMigrationNodeSequence">
                <with-param name="appId" value="{get-property('appName')}"/>
                <with-param name="externalId" value="{get-property('nodeId')}"/>
                <with-param name="getContent" value="{get-property('getContent')}"/>
                <with-param name="serviceHeaderString" value="{get-property('serviceHeaderString')}"/>
              </call-template>
              <filter
                xmlns:csgd="urn:es.caib.archivodigital.esb.services:1.0.0" xpath="$body/csgd:getDocumentResult/csgd:result/csgd:code[text() != 'COD_000']">
                <then>
                  <property name="exceptionHttpStatusCode"
                    scope="default" type="STRING" value="404"/>
                  <property name="exceptionCode" scope="default"
                    type="STRING" value="COD_001"/>
                  <property
                    expression="fn:concat('No se ha encontrado el documento migrado con id externo ',get-property('nodeId'),' y aplicación ',get-property('appName'),'.')"
                    name="exceptionDesc" scope="default" type="STRING"/>
                </then>
                <else/>
              </filter>
            </case>
            <default/>
          </switch>
        </then>
        <else>
          <property name="HTTP_SC" scope="axis2" type="STRING" value="400"/>
          <payloadFactory media-type="json">
            <format>
			            		{
			            			"exception":{
			            				"code": "COD_099",
			            				"description": "$1"
			            			}
			            		}                 
			            	</format>
            <args>
              <arg evaluator="xml" expression="get-property('errorMessage')"/>
            </args>
          </payloadFactory>
          <respond description="Enviar excepcion"/>
        </else>
      </filter>
      <filter regex="false" source="boolean(get-property('exceptionCode'))">
        <then>
          <property name="HTTP_SC" scope="axis2" type="STRING" value="200"/>
        </then>
        <else>
          <property expression="get-property('exceptionHttpStatusCode')"
            name="HTTP_SC" scope="axis2" type="STRING"/>
          <payloadFactory media-type="json">
            <format>
           		{
           			"exception":{
           				"code": "$1",
           				"description": "$2"
           			}
           		}                 
           	   </format>
            <args>
              <arg evaluator="xml" expression="get-property('exceptionCode')"/>
              <arg evaluator="xml" expression="get-property('exceptionDesc')"/>
            </args>
          </payloadFactory>
        </else>
      </filter>
      <property name="messageType" scope="axis2" type="STRING" value="application/json"/>
      <respond/>
    </inSequence>
    <outSequence/>
  </target>
  <parameter name="disableSOAP12">true</parameter>
  <parameter name="disableSOAP11">true</parameter>
</proxy>
